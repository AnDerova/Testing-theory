What is Software Testing?
Software testing is a set of activities to discover defects and evaluate the quality of software artifacts (test objects). Testing is a form of quality control (QC).
Software testing is a process of analyzing software and accompanying documentation in order to identify defects and improve the quality of the product. 
Testing is not only a technical activity. It also needs to be properly planned, managed, estimated, monitored and controlled
Quality
The degree to which a set of inherent characteristics of an object fulfils requirements.
степень соответстви€ совокупности присущих характеристик объекта требовани€м.
When Do We start and Stop a Test?
To find defects early, both static testing and dynamic testing should be started as early as possible.
The TimeТs Up! We stop testing when the time allocated for testing has expired.
The Pi?ata. We stop the test when we see the first sufficiently dramatic problem.
The Dead Horse. The program is too buggy to make further testing worthwhile. We know that things are going to be modified so much that any more testing will be invalidated by the changes.
The Mission Accomplished. We stop testing when we have answered all of the questions that we set out to answer.
The Mission Revoked. Our client has told us, УPlease stop testing now.Ф That might be because weТve run out of budget, or because the project has been cancelled, or any number of other things.†
The I Feel Stuck! For whatever reason, we stop because we perceive thereТs something blocking us. We donТt have the information we need (many people claim that they canТt test without sufficient specifications, for example). ThereТs a blocking bug, such that we canТt get to the area of the product that we want to test; we donТt have the equipment or tools we need; we donТt have the expertise on the team to perform some kind of specialized test.
The Pause That Refreshes. Instead of stopping testing, we suspend it for a while. We might stop testing and take a break when weТre tired, or bored, or uninspired to test. We might pause to do some research, to do some planning, to reflect on what weТve done so far, the better to figure out what to do next. The idea here is that we need a break of some kind, and can return to the product later with fresh eyes or fresh minds.
The Flatline. No matter what we do, weТre getting the same result. This can happen when the program has crashed or has become unresponsive in some way.
The Customary Conclusion. We stop testing when we usually stop testing. ThereТs a protocol in place for a certain number of test ideas, or test cases, or test cycles or variation, such that thereТs a certain amount of testing work that we do, and we stop when thatТs done.
No more interesting questions. At this point, weТve decided that no questions have answers sufficiently valuable to justify the cost of continuing to test, so weТre done.†
The Avoidance/Indifference. Sometimes people donТt care about more information, or donТt want to know whatТs going on the in the program. Some people decide to stop testing because theyТre lazy, malicious, or unmotivated. Sometimes the business reasons for releasing are so compelling that no problem that we can imagine would stop shipment, so no new test result would matter.
Test Objectives 
Evaluating work products such as requirements, user stories, designs, and code 
Triggering failures and finding defects 
Ensuring required coverage of a test object 
Reducing the level of risk of inadequate software quality 
Verifying whether specified requirements have been fulfilled 
Verifying that a test object complies with contractual, legal, and regulatory requirements 
Providing information to stakeholders to allow them to make informed decisions 
Building confidence in the quality of the test object 
Validating whether the test object is complete and works as expected by the stakeholders 

Objectives of testing can vary, depending upon the context, which includes the work product being tested, the test level, risks, the software development lifecycle (SDLC) being followed, and factors related to the business context, e.g., corporate structure, competitive considerations, or time to market.
“ипичные цели тестировани€: 
ќценка рабочих продуктов, таких как требовани€, пользовательские истории, проекты и код. 
ѕровоцирование отказов и обнаружение дефектов. 
ќбеспечение необходимого покрыти€ объекта тестировани€. 
—нижение уровн€ риска ненадлежащего качества программного обеспечени€. 
ѕроверка выполнени€ зафиксированных требований. 
ѕроверка того, что объект тестировани€ соответствует контрактным, юридическим и нормативным требовани€м. 
ѕредоставление информации заинтересованным сторонам дл€ прин€ти€ обоснованных решений. 
—оздание уверенности в качестве объекта тестировани€. 
ѕроверка того, завершен ли объект тестировани€ и работает ли он так, как ожидают заинтересованные стороны. 
÷ели тестировани€ могут варьироватьс€ в зависимости от контекста, который включает тестируемый рабочий продукт, уровень тестировани€, риски, примен€емый жизненный цикл разработки программного обеспечени€ (SDLC), а также факторы, св€занные с бизнес-контекстом, например, корпоративна€ структура, услови€ конкуренции или врем€ выхода на рынок.
Quality Assurance (QA)
QA is a process-oriented, preventive approach that focuses on the implementation and improvement of processes. It works on the basis that if a good process is followed correctly, then it will generate a good product. QA applies to both the development and testing processes, and is the responsibility of everyone on a project. 
In QA test results provide feedback on how well the development and test processes are performing.
ќбеспечение качества (QA) Ч это превентивный подход, ориентированный на процесс, который сосредотачиваетс€ на внедрении и улучшении процессов. ќн предполагает, что если правильно следовать хорошему процессу, то будет создан хороший продукт. ќбеспечение качества примен€етс€ как к процессам разработки, так и к процессам тестировани€, и за него несет ответственность каждый участник проекта.
Quality Control (QC)
QC is a product-oriented, corrective approach that focuses on those activities supporting the achievement of appropriate levels of quality. Testing is a major form of quality control. 
In QC test results used to fix defects.
 онтроль качества (QC) Ч это корректирующий подход, ориентированный на продукт, который сосредотачиваетс€ на действи€х, поддерживающих достижение надлежащего уровн€ качества. “естирование €вл€етс€ основным видом контрол€ качества.
What is Testing?
Testing is a form of quality control (QC).
Testing Principles
1. Testing shows the presence, not the absence of defects. Testing reduces the probability of defects remaining undiscovered in the test object, but even if no defects are found, testing cannot prove test object correctness. 
2. Exhaustive testing is impossible. Testing everything is not feasible except in trivial cases. Rather than attempting to test exhaustively, test techniques, test case prioritization, and risk-based testing.
3. Early testing saves time and money. Defects that are removed early in the process will not cause subsequent defects in derived work products. The cost of quality will be reduced since fewer failures will occur later in the SDLC. To find defects early, both static testing and dynamic testing should be started as early as possible. 
4. Defects cluster together. A small number of system components usually contain most of the defects discovered or are responsible for most of the operational failures. This phenomenon is an illustration of the Pareto principle. 
5. Tests wear out. If the same tests are repeated many times, they become increasingly ineffective in detecting new defects. To overcome this effect, existing tests and test data may need to be modified, and new tests may need to be written. However, in some cases, repeating the same tests can have a beneficial outcome, e.g., in automated regression testing. 
6. Testing is context dependent. There is no single universally applicable approach to testing. Testing is done differently in different contexts. 
7. Absence-of-defects fallacy. It is a fallacy (i.e., a misconception) to expect that software verification will ensure the success of a system. Thoroughly testing all the specified requirements and fixing all the defects found could still produce a system that does not fulfill the usersТ needs and expectations, that does not help in achieving the customerТs business goals, and that is inferior compared to other competing systems. In addition to verification, validation should also be carried out.
1. “естирование демонстрирует наличие дефектов, а не их отсутствие. “естирование снижает веро€тность того, что дефекты в объекте тестировани€ останутс€ необнаруженными, но даже если дефекты не были обнаружены, тестирование не доказывает корректности объекта тестировани€. 
2. »счерпывающее тестирование невозможно. ѕолное тестирование с использованием всех комбинаций вводов и предусловий физически невыполнимо, за исключением тривиальных случаев. ¬место того, чтобы пытатьс€ провести исчерпывающее тестирование, следует использовать методы тестировани€, расстановку приоритетов тестовых сценариев и тестирование, основанное на рисках. 
3. –аннее тестирование экономит врем€ и деньги. ƒефекты, устраненные на ранней стадии процесса, не вызовут последующих дефектов в производных рабочих продуктах. —тоимость качества будет снижена, так как позже в ∆÷ ѕќ будет происходить меньше отказов. ƒл€ раннего обнаружени€ дефектов как можно раньше следует начинать как статическое тестирование, так и динамическое тестирование. 
4.  ластеризаци€ дефектов. ќбычно небольшое количество системных компонентов содержит большинство обнаруженных дефектов или порождает большинство эксплуатационных отказов. Ёто €вление €вл€етс€ иллюстрацией принципа ѕарето. 
5. “есты устаревают. ≈сли одни и те же тесты повтор€ютс€ много раз, они станов€тс€ все более неэффективными в обнаружении новых дефектов. ƒл€ обнаружени€ новых дефектов может потребоватьс€ изменение существующих тестов и тестовых данных, а также написание новых тестов. ќднако в некоторых случа€х повторение одних и тех же тестов может иметь положительный результат, например, при автоматизированном регрессионном тестировании. 
6. “естирование зависит от контекста. Ќе существует единого универсального подхода к тестированию. “естирование выполн€етс€ по-разному в зависимости от контекста.
7. «аблуждение об отсутствии дефектов. Ѕыло бы ошибкой ожидать, что верификаци€ программного обеспечени€ обеспечит успех системы. “щательное тестирование всех указанных требований и исправление всех обнаруженных дефектов может привести к созданию системы, котора€ не будет соответствовать потребност€м и ожидани€м пользователей, не будет помогать в достижении бизнес-целей заказчика и будет уступать другим конкурирующим системам. 
„то такое верификаци€?
verification, i.e., checking whether the system meets specified requirements
„то такое валидаци€?
validation, which means checking whether the system meets usersТ and other stakeholdersТ needs in its operational environment.

ѕеречислите характеристики качества программного обеспечени€ и их атрибуты.
’арактеристики качества программного обеспечени€ €вл€ютс€ важной составл€ющей оценки и улучшени€ качества ѕќ. Ќекоторые из основных характеристик качества программного обеспечени€ включают в себ€:
‘ункциональность Ч способность ѕќ выполн€ть необходимые функции и соответствовать требовани€м пользовател€. ‘ункциональность может быть измерена с помощью тестировани€ функциональности.
Ќадежность Ч способность ѕќ работать стабильно и предсказуемо в различных услови€х. Ќадежность может быть измерена с помощью тестировани€ стабильности и надежности ѕќ.
Ёффективность Ч способность ѕќ выполн€ть свои функции быстро и с минимальным использованием ресурсов. Ёффективность может быть измерена с помощью тестировани€ производительности.
”добство использовани€ Ч способность ѕќ быть легким в использовании дл€ конечного пользовател€. ”добство использовани€ может быть измерено с помощью тестировани€ пользовательского интерфейса и UX-тестировани€.
—опровождаемость Ч способность ѕќ быть легко измен€емым и сопровождаемым после его выпуска. —опровождаемость может быть измерена с помощью тестировани€ обновлений и модификаций ѕќ.
—овместимость Ч способность ѕќ работать с другими системами и программным обеспечением. —овместимость может быть измерена с помощью тестировани€ совместимости.
Ѕезопасность Ч способность ѕќ защищать данные и систему от внешних угроз. Ѕезопасность может быть измерена с помощью тестировани€ безопасности и аудита безопасности.
ѕоддерживаемость Ч способность ѕќ быть поддерживаемым и обслуживаемым с помощью документации и справочной информации. ѕоддерживаемость может быть измерена с помощью тестировани€ документации и руководства пользовател€.

»з каких этапов состоит Waterfall model? ѕреимущества и недостатки
¬одопадна€ модель (waterfall model) примен€етс€ в авиастроении, военной или космической отрасл€х, медицине и финансовом секторе. ќна предполагает однократное выполнение каждой из фаз проекта, которые, в свою очередь, строго следуют друг за другом:

јнализ требований => ѕланирование => ƒизайн => –азработка => “естирование => ¬вод в эксплуатацию => ѕоддержка

ќчень упрощенно можно сказать, что в рамках этой модели в любой момент времени команде Ђвиднаї лишь предыдуща€ и следующа€ фаза. ¬ реальной же разработке ѕќ приходитс€ Ђвидеть весь проект целикомї и возвращатьс€ к предыдущим фазам, чтобы исправить недоработки или что-то уточнить. 
  недостаткам водопадной модели прин€то относить тот факт, что участие пользователей ѕќ в ней либо не предусмотрено вообще, либо предусмотрено лишь косвенно на стадии однократного сбора требований. — точки зрени€ же тестировани€ эта модель плоха тем, что тестирование в €вном виде по€вл€етс€ здесь лишь с середины развити€ проекта, достига€ своего максимума в самом конце. «ато бюджет известен заранее!

»з каких этапов состоит V-model?  огда использовать V-model?
V-модель (V-model): ћодель, описывающа€ процессы жизненного цикла разработки программного обеспечени€ с момента составление спецификации требований до этапа сопровождени€. V модель показывает интеграцию процессов тестировани€ в каждую фазу цикла разработки программного обеспечени€. 
V-образна€ модель (V-model) €вл€етс€ логическим развитием водопадной. ќчень упрощенно можно сказать, что при использовании v-образной модели на каждой стадии Ђна спускеї нужно думать о том, что и как будет происходить на соответствующей стадии Ђна подъЄмеї. “естирование здесь по€вл€етс€ уже на самых ранних стади€х развити€ проекта, что позвол€ет минимизировать риски, а также обнаружить и устранить множество потенциальных проблем до того, как они станут проблемами реальными.

V-образна€ модель часто используетс€ в разработке критически важных систем, таких как авиационные, автомобильные, медицинские и другие системы, где ошибки могут иметь серьезные последстви€.
¬ отрасл€х с строгими регул€торными требовани€ми, таких как фармацевтика, финансовые услуги и телекоммуникации, V-образна€ модель помогает удовлетворить требовани€ к документированию и валидации процессов.

Iterative mode
 лючевой особенностью данной модели €вл€етс€ разбиение проекта на относительно небольшие промежутки (итерации), каждый из которых в общем случае может включать в себ€ все классические стадии, присущие водопадной и v-образной модел€м. »тогом итерации €вл€етс€ приращение (инкремент) функциональности продукта. »теративна€ модель разработки ѕќ эффективна дл€ проектов, где требовани€ могут измен€тьс€ и уточн€тьс€ в процессе разработки, и где важна гибкость и адаптивность

јнализ требований => ѕланирование => ƒизайн => –азработка => “естирование => ¬вод в эксплуатацию (Deployment)  => ќценка и обратна€ св€зь => ѕланирование следующей итерации

ѕреимущества итеративной модели:
√ибкость: ¬озможность адаптации к измен€ющимс€ требовани€м и улучшени€ системы в каждой итерации.
”правл€емость рисками: –иски вы€вл€ютс€ и управл€ютс€ на ранних стади€х благодар€ посто€нному тестированию и обратной св€зи.
ѕостепенное улучшение: ¬озможность поэтапного наращивани€ функциональности и качества системы.
–анн€€ проверка концепций: –аннее вы€вление и исправление ошибок, что способствует улучшению конечного продукта.
Ќедостатки итеративной модели:
“ребует дисциплины: Ќеобходимость строгого управлени€ процессом и документацией.
ћожет быть сложной: ¬озможность увеличени€ сложности управлени€ проектом с увеличением количества итераций.
«атраты времени и ресурсов: ћногократное прохождение всех этапов разработки может потребовать больше времени и ресурсов.
Agile - это?
Agile манифест - это?
 акие ценности Agile манифест?
ќсновные принципы Agile манифест?

Agile - это образ мышлени€, основанный на ценност€х и принципах Agile Manifesto. 
The Agile Manifesto:

люди и взаимодействие важнее процессов и инструментов;

работающий продукт важнее исчерпывающей документации;

сотрудничество с заказчиком важнее согласовани€ условий контракта;

готовность к изменени€м важнее следовани€ первоначальному плану.